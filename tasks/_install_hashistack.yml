-
  name: create application folder
  become: true
  ansible.builtin.file:
    path: "/opt/{{ app_name }}"
    state: directory
    mode: 0750
    group: "{{ app_user }}"
    owner: "{{ app_user }}"
-
  name: download archive "v{{ app_version }}"
  become: true
  ansible.builtin.get_url:
    url: "https://releases.hashicorp.com/{{ app_name }}/{{ app_version }}/{{ app_name }}_{{ app_version }}_linux_amd64.zip"
    dest: /opt/{{ app_name }}/{{ app_name }}.zip
    checksum: "sha256:https://releases.hashicorp.com/{{ app_name }}/{{ app_version }}/{{ app_name }}_{{ app_version }}_SHA256SUMS"
    mode: '0644'
    timeout: 300
  register: archive_downloaded
  until: archive_downloaded is succeeded
  notify: unarchive_application
-
  name: get binary status
  ansible.builtin.stat:
    path: "{{ folder_binary }}/{{ app_name }}"
  register: bin_status
-
  name: check if installation is required
  ansible.builtin.debug:
    msg: Unarchiving application
  notify: unarchive_application
  when: |
    app_force_install or
    not bin_status.stat.exists
-
  name: flush handlers
  ansible.builtin.meta: flush_handlers

#-
#  name: unarchive application
#  become: true
#  ansible.builtin.unarchive:
#    src: "{{ archive_downloaded.dest }}"
#    dest: "{{ folder_binary }}"
#    remote_src: yes
#    mode: 0755
#    owner: root
#    group: root
#  notify: restart_service
#  when: |
#    app_force_install or
#    not bin_status.stat.exists
  #archive_downloaded.changed or