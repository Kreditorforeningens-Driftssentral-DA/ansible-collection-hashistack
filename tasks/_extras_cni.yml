# EXTRA CNI
---
-
  name: CNI | create folder
  become: true
  ansible.builtin.file:
    path: "{{ folder_cni }}/bin"
    owner: root
    group: root
    mode: '0755'
    state: directory
-
  name: CNI | download archive
  become: true
  ansible.builtin.get_url:
    url: "https://github.com/containernetworking/plugins/releases/download/v{{  hashistack.cni_version }}/cni-plugins-linux-amd64-v{{  hashistack.cni_version }}.tgz"
    dest: "{{ folder_cni }}/cni-plugins-v{{ hashistack.cni_version }}.tgz"
    checksum: "sha1:https://github.com/containernetworking/plugins/releases/download/v{{ hashistack.cni_version }}/cni-plugins-linux-amd64-v{{ hashistack.cni_version }}.tgz.sha1"
    mode: '0644'
    timeout: 300
  register: cni_download_result
  until: cni_download_result is succeeded
-
  name: CNI | get archive status
  become: true
  ansible.builtin.stat:
    path: "{{ cni_download_result.dest }}"
    checksum_algorithm: sha256
    get_checksum: yes
  register: cni_archive_status
-
  name: CNI | unarchive application
  become: true
  ansible.builtin.unarchive:
    src: "{{ cni_download_result.dest }}"
    dest: "{{ folder_cni }}/bin"
    owner: root
    group: root
    mode: '0755'
    remote_src: true
-
  name: CNI | configuration
  block:
  -
    name: CNI | bridge networking
    become: true
    community.general.modprobe:
      name: "{{ item.name }}"
      state: "{{ item.state | default('present') }}"
    loop: # /etc/modules-load.d/br_netfilter.conf
    - name: br_netfilter
  -
    name: CNI | iptables
    become: true
    ansible.posix.sysctl:
      name: "{{ item.name }}"
      value: "{{ item.value | default('1') }}"
      state: "{{ item.state | default('present') }}"
      sysctl_file: /etc/sysctl.d/50-hashistack-cni.conf
      reload: true
    loop:
    - name: net.bridge.bridge-nf-call-arptables
    - name: net.bridge.bridge-nf-call-ip6tables
    - name: net.bridge.bridge-nf-call-iptables
  when:
  - hashistack.cni_version is defined
  - ansible_service_mgr == 'systemd'
